# -*- coding: utf-8 -*-
"""scriptAccidenteFiesta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IAl9x6VmGSspRlAk5XnJ4FKPGcPZ8OqM

Importaciones
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Cargar datos de accidentalidad"""

# Cargar datos de festividades
datosFestividades = pd.read_csv("https://raw.githubusercontent.com/Dltr17/AccidentalidadVial2017-2021/main/datos/dataFestividades.csv")

# Cargar datos de accidentes
datosAccidentes = pd.read_csv("https://raw.githubusercontent.com/Dltr17/AccidentalidadVial2017-2021/main/datos/dataAccidentalidad2017-2021(Transformada).csv")

"""Exploracion de datos"""

print("Exloracion datos accidentes")
print(datosAccidentes.head())
print(datosAccidentes.info())



print("Exloracion datos Festividades")
print(datosFestividades.head())
print(datosFestividades.info())

"""Crear una columna nueva en los datos de accidentes para indicar si hay festividad y el ID de la festividad

"""

datosAccidentes['Festividad'] = 0
datosAccidentes['ID_Festividad'] = 0

"""Iterar sobre cada fila de los datos de accidentes y generar el nuevo archivo de datos"""

# Iterar sobre cada fila de los datos de accidentes
for indice, fila in datosAccidentes.iterrows():
    departamento = fila['NomDepartamento']
    mes = fila['NumMes']
    dia = fila['Día']

    # Buscar en los datos de festividades si hay una festividad correspondiente
    festividad = datosFestividades[(datosFestividades['NomDepartamento'] == departamento) &
                                    (datosFestividades['mes'] == mes) &
                                    (datosFestividades['DiaInicio'] <= dia) &
                                    (datosFestividades['DiaFin'] >= dia)]

    # Si se encuentra una festividad, actualizar las columnas correspondientes en los datos de accidentes
    if not festividad.empty:
        datosAccidentes.at[indice, 'Festividad'] = 1
        datosAccidentes.at[indice, 'ID_Festividad'] = festividad['Índice'].iloc[0]

# Guardar los datos de accidentes con las nuevas columnas en un nuevo archivo
datosAccidentes.to_csv("datosAccidentes_con_festividades.csv", index=False)

# Descargar el archivo
from google.colab import files
files.download("datosAccidentes_con_festividades.csv")

datosAccidentes

# Calcular el número de accidentes asociados con una festividad y los que no
accidentes_con_festividad = datosAccidentes['Festividad'].sum()
accidentes_sin_festividad = len(datosAccidentes) - accidentes_con_festividad

# Calcular los porcentajes
porcentaje_con_festividad = accidentes_con_festividad / len(datosAccidentes) * 100
porcentaje_sin_festividad = accidentes_sin_festividad / len(datosAccidentes) * 100

# Crear una lista con los porcentajes y los nombres de las categorías
porcentajes = [porcentaje_con_festividad, porcentaje_sin_festividad]
categorias = ['Con festividad', 'Sin festividad']

# Crear el gráfico circular
plt.figure(figsize=(8, 6))
plt.pie(porcentajes, labels=categorias, autopct='%1.1f%%', startangle=140)
plt.title('Porcentaje de accidentes con y sin festividad')
plt.axis('equal')
plt.show()

# Calcular la cantidad de accidentes asociados con una festividad y los que no por departamento
accidentes_por_departamento = datosAccidentes.groupby(['NomDepartamento', 'Festividad']).size().unstack(fill_value=0)

# Crear el gráfico de barras
accidentes_por_departamento.plot(kind='bar', stacked=True, figsize=(12, 8))
plt.title('Cantidad de accidentes asociados con festividad por departamento')
plt.xlabel('Departamento')
plt.ylabel('Cantidad de accidentes')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Festividad', labels=['Sin festividad', 'Con festividad'])
plt.show()

# Calcular la cantidad de accidentes asociados con una festividad y los que no por mes
accidentes_por_mes = datosAccidentes.groupby(['NumMes', 'Festividad']).size().unstack(fill_value=0)

# Crear el gráfico de barras
accidentes_por_mes.plot(kind='bar', stacked=True, figsize=(12, 8))
plt.title('Cantidad de accidentes asociados con festividad por mes')
plt.xlabel('Mes')
plt.ylabel('Cantidad de accidentes')
plt.xticks(rotation=0)
plt.legend(title='Festividad', labels=['Sin festividad', 'Con festividad'])
plt.show()