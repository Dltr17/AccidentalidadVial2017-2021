# -*- coding: utf-8 -*-
"""scriptAnalisisAccidentalidadVial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15OgR3BqpQIpAIP0GGZ8AO-xVaZZ-29vf

Importaciones
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Cargar datos de accidentalidad"""

# Cargar datos
datosAccidentalidad = pd.read_csv("https://raw.githubusercontent.com/Dltr17/AccidentalidadVial2017-2021/main/datos/datos.csv")

# Lista de años deseados
años_deseados = [2017, 2018, 2019, 2020, 2021]

# Filtrar datos para mantener solo los años deseados
datosAccidentalidad = datosAccidentalidad[datosAccidentalidad['Año'].isin(años_deseados)]

"""Exploracion de datos"""

print("Exloracion datos accidentes")
print(datosAccidentalidad.info())

datosAccidentalidad.head()

datosAccidentalidad.describe().T

# Agrupar los datos por año y tipo de día (festivo o no festivo)
accidentalidad_por_año = datosAccidentalidad.groupby(['Año', 'Festividad']).size().unstack()

# Graficar los totales por año
accidentalidad_por_año.plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Accidentalidad por año (Festivo vs No festivo)')
plt.xlabel('Año')
plt.ylabel('Total de accidentes')
plt.legend(['No festivo', 'Festivo'])
plt.show()

"""Comportamiento por año"""

# Agrupar los datos por año y mes
datos_grouped = datosAccidentalidad.groupby(['Año', 'NumMes'])

# Crear la figura y los subplots
fig, axs = plt.subplots(5, 1, figsize=(12, 20), sharex=True)

# Configuración de la leyenda
handles, labels = [], []
for ax in axs:
    ax.set_title(ax.get_title(), pad=20)  # Aumentar el espacio entre el título y la gráfica
    ax.legend(loc='upper left', bbox_to_anchor=(0, -0.3), fancybox=True, shadow=True, ncol=5)
    ax.get_legend().remove()  # Quitar la leyenda por defecto
    handles_, labels_ = ax.get_legend_handles_labels()
    handles.extend(handles_)
    labels.extend(labels_)

# Añadir una leyenda general antes de las gráficas
fig.legend(handles, labels, loc='upper center', bbox_to_anchor=(0.5, 0), fancybox=True, shadow=True, ncol=5)

# Total de accidentes por mes y año
accidentes_total = datos_grouped.size().unstack(level=0)
accidentes_total.plot(ax=axs[0], kind='line', marker='o')
axs[0].set_title('Total de accidentes por mes y año')
axs[0].set_ylabel('Total de accidentes')

# Total de accidentes por mes y año, festivos
accidentes_festivos = datosAccidentalidad[datosAccidentalidad['Festividad'] == 1].groupby(['Año', 'NumMes']).size().unstack(level=0)
accidentes_festivos.plot(ax=axs[1], kind='line', marker='o')
axs[1].set_title('Total de accidentes por mes y año (Festivos)')
axs[1].set_ylabel('Total de accidentes festivos')

# Total de accidentes por mes y año, no festivos
accidentes_no_festivos = datosAccidentalidad[datosAccidentalidad['Festividad'] == 0].groupby(['Año', 'NumMes']).size().unstack(level=0)
accidentes_no_festivos.plot(ax=axs[2], kind='line', marker='o')
axs[2].set_title('Total de accidentes por mes y año (No festivos)')
axs[2].set_ylabel('Total de accidentes no festivos')

# Promedio de muertos por mes y año
promedio_muertos = datos_grouped['n_muertos'].mean().unstack(level=0)
promedio_muertos.plot(ax=axs[3], kind='line', marker='o')
axs[3].set_title('Promedio de muertos por mes y año')
axs[3].set_ylabel('Promedio de muertos')

# Promedio de heridos por mes y año
promedio_heridos = datos_grouped['n_heridos'].mean().unstack(level=0)
promedio_heridos.plot(ax=axs[4], kind='line', marker='o')
axs[4].set_title('Promedio de heridos por mes y año')
axs[4].set_ylabel('Promedio de heridos')

# Configuración adicional
for ax in axs:
    ax.set_xlabel('Mes')
    ax.grid(True)

plt.tight_layout()
plt.show()

coef = datosAccidentalidad.corr(method='pearson')
coef

plt.figure(figsize=(8,6))
sns.heatmap(coef, annot=True)
plt.show